openapi: 3.0.3
info:
  title: Library API
  version: 1.0.6
  description: STD22075
servers:
  - url: https://library.com
tags:
  - name: Books
    description: manipulation of book
  - name: Authors
    description: manipulation of author
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateMin
          description: |
            if `releaseDateMax` is not provided,
            `releaseDateMin` is ignored
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: releaseDateMax
          description: |
            if `releaseDateMin` is not provided,
            `releaseDateMax` is ignored
          schema:
            type: string
            format: date
          required: false
        - $ref: "#/components/parameters/queryPage"
        - $ref: "#/components/parameters/queryPageSize"
        - in: query
          name: available
          description: |
            if it's `true`, it returns lits of available book
            if it's `false`, it returns lits of unavailable book
          required: false
          schema:
            type: boolean
      responses:
        200:
          $ref: "#/components/responses/bookList"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateBook'
      responses:
        200:
          $ref: "#/components/responses/bookList"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - Books
      description: Change the author of one book
      parameters:
        - in: path
          name: bookId
          schema:
            type: string
          required: true
        - in: path
          name: authorId
          schema:
            type: string
          required: true
      responses:
        200:
          $ref: "#/components/responses/bookList"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  /borrow:
    post:
      tags:
        - Books
      description: borrow books
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/BorrowBook"
      responses:
        200:
          $ref: "#/components/responses/borrowBookList"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  /return:
    post:
      description: return the books in the liste
      tags:
        - Books
      requestBody:
        content:
          application/json:
            schema:
              type: array
              description: list of index of the books
              items:
                type: string
                description: id of the books
      responses:
        200:
          $ref: "#/components/responses/borrowBookList"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  /listBook/{idVisitor}:
    post:
      description: return the books of one visitor in the liste
      tags:
        - Books
      parameters:
        - in: path
          name: idVisitor
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: "#/components/responses/borrowBookList"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  /books/{bookId}/topics/{topicsId}:
    put:
      tags:
        - Books
      description: Change the topics of one book
      parameters:
        - in: path
          name: bookId
          schema:
            type: string
          required: true
        - in: path
          name: topicsId
          schema:
            type: string
          required: true
      responses:
        200:
          $ref: "#/components/responses/bookList"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  /books/authors:
    put:
      tags:
        - Books
      description: Change authors of some books
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                required:
                  - bookId
                  - authorId
                properties:
                  bookId:
                    type: string
                  authorId:
                    type: string
      responses:
        200:
          $ref: "#/components/responses/bookList"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  /authors/{id}:
    delete:
      tags:
        - Authors
      operationId: deleteAuthor
      summary: delete one author
      parameters:
        - in: query
          name: id
          description: id of the author
          required: true
          schema:
            type: string
      responses:
        200:
          description: Deleted authors
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/DefaultResponse"
                properties:
                  body:
                    $ref: '#/components/schemas/Author'
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  /authors/{page}/{pageSize}:
    get:
      tags:
        - Authors
      operationId: getAuthor
      summary: Get all authors
      description: The returned author are filtered by name
      parameters:
        - in: query
          name: authorName
          description: Filter the return author by given name
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/pathPage"
        - $ref: "#/components/parameters/pathPageSize"
      responses:
        200:
          $ref: "#/components/responses/authorList"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  /authors:
    get:
      tags:
        - Authors
      operationId: getAuthor
      summary: Get all authors
      description: The returned author are filtered by name
      parameters:
        - in: query
          name: authorName
          description: Filter the return author by given name
          required: false
          schema:
            type: string
      responses:
        200:
          $ref: "#/components/responses/authorList"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
    put:
      tags:
        - Authors
      operationId: crupdateAuthor
      summary: Create or update list of authors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Author"
      responses:
        200:
          $ref: "#/components/responses/authorList"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
    delete:
      tags:
        - Authors
      operationId: deleteAuthors
      summary: delete authors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        200:
          $ref: "#/components/responses/authorList"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  /books/import:
    post:
      tags:
        - Books
      operationId: importBooks
      summary: index Books
      requestBody:
        $ref: "#/components/requestBodies/defaultInputJsonExcelBook"
      responses:
        200:
          $ref: "#/components/responses/bookList"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  /authors/import:
    post:
      tags:
        - Authors
      operationId: importAuthors
      summary: index authors
      requestBody:
        $ref: "#/components/requestBodies/defaultInputJsonExcelAuthor"
      responses:
        200:
          $ref: "#/components/responses/authorList"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
components:
  requestBodies:
    defaultInputJsonExcelAuthor:
      content:
          application/json:
            schema:
              oneOf:
                - type: array
                  items:
                    $ref: "#/components/schemas/AuthorWithoutId"
                - type: string
                  format: binary
                  description: excel converted to binary
    defaultInputJsonExcelBook:
      content:
          application/json:
            schema:
              oneOf:
                - type: array
                  items:
                    $ref: "#/components/schemas/importBook"
                - type: string
                  format: binary
                  description: excel converted to binary
  schemas:
    visitor:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        reference:
          type: string
    idAuthor:
      type: object
      properties:
        id:
          type: integer
    BooksWithoutId:
      type: object
      properties:
        bookName:
          type: string
        pageNumbers:
          type: integer
        releaseDate:
          type: string
          format: date
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
    CrupdateBook:
      allOf:
        - $ref: "#/components/schemas/BooksWithoutId"
      properties:
        id:
          type: string
    AuthorWithoutId:
      type: object
      properties:
        name:
          type: string
        sex:
          type: string
          enum:
            - M
            - F
    Author:
      allOf:
        - $ref: '#/components/schemas/AuthorWithoutId'
        - $ref: "#/components/schemas/idAuthor"
    Book:
      type: object
      allOf:
        - $ref: '#/components/schemas/CrupdateBook'
      properties:
        author:
          $ref: '#/components/schemas/Author'
    importBook:
      allOf:
        - $ref: "#/components/schemas/CrupdateBook"
      properties:
        authorId:
          type: string
    DefaultResponse:
      type: object
      properties:
        status:
          type: object
          properties:
            code:
              type: string
              enum:
                - 200
                - 400
                - 403
                - 500
            message:
              type: string
              default: OK
        body:
          type: object
    BorrowBook:
      type: object
      properties:
        visitorId:
          type: string
        bookId:
          type: string
        borrowDate:
          type: string
          format: date-time
        isReturned:
          type: boolean
  parameters:
    queryPage:
      in: query
      name: page
      description: index of the page with pagination
      schema:
        type: integer
        default: 1
      required: false
    queryPageSize:
      in: query
      name: pageSize
      description: size of page in pagination
      schema:
        type: integer
        default: 50
      required: false
    pathPage:
      in: path
      name: page
      description: index of the page with pagination
      schema:
        type: integer
        default: 1
      required: true
    pathPageSize:
      in: path
      name: pageSize
      description: size of page in pagination
      schema:
        type: integer
        default: 50
      required: true
  responses:
    400:
      description: bad request
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: "#/components/schemas/DefaultResponse"
            default:
              status:
                code: 400
                message: bad request
              body:
                error: Incorrect request
    403:
      description: forbidden
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: "#/components/schemas/DefaultResponse"
            default:
              status:
                code: 403
                message: forbidden
              body:
                error: access denied
    500:
      description: internal server erreur
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: "#/components/schemas/DefaultResponse"
            default:
              status:
                code: 500
                message: internal server erreur
              body:
                error: internal server erreur
    authorList:
      description: The list of authors
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/DefaultResponse"
              - properties:
                  body:
                    type: array
                    items:
                      $ref: "#/components/schemas/Author"
    bookList:
      description: The list of books
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/DefaultResponse"
              - properties:
                  body:
                    type: array
                    items:
                      $ref: "#/components/schemas/Book"
    borrowBookList:
      description: The list of books
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/DefaultResponse"
              - properties:
                  body:
                    type: array
                    items:
                      $ref: "#/components/schemas/BorrowBook"